#!/bin/bash

# SPDX-FileCopyrightText: 2024 The Calyx Institute
#
# SPDX-License-Identifier: Apache-2.0

#
# generate_mainline_manifest.sh:
#
#   Generate mainline manifest files, given an AOSP mainline build root
#   and a module name. Uses variables from vars/aml and vars/aml_tags.
#
#
##############################################################################


### SET ###

# use bash strict mode
set -euo pipefail

### TRAPS ###

# trap signals for clean exit
trap 'exit $?' EXIT
trap 'error_m interrupted!' SIGINT

### CONSTANTS ###
readonly script_name="$(basename "$0")"
readonly script_path="$(cd "$(dirname "$0")/..";pwd -P)"
readonly top="$(cd "${script_path}/../..";pwd -P)"
readonly default_aosp_manifest_url="https://android.googlesource.com/platform/manifest.git"
readonly default_calyx_remote_url="ssh://git@gitlab.com"
readonly apex_manifest_outdir="${top}/external/calyx/apex_manifest"
readonly calyxos_revision_format="refs/tags/%s-calyx"
readonly help_message="$0 <aml_buildroot> <module_name>"

### ENVIRONMENT VARIABLES ###
AOSP_MANIFEST="${AOSP_MANIFEST:-$default_aosp_manifest_url}"
AOSP_MIRROR="${AOSP_MIRROR:-}" # - local AOSP mirror reference; provided by environment, or not used
CALYX_REMOTE_URL="${CALYX_REMOTE_URL:-$default_calyx_remote_url}"
# If not unset or 'n', will only generate CalyxOS manifests.
GENERATE_CALYXOS_MANIFESTS_ONLY="${GENERATE_CALYXOS_MANIFESTS_ONLY:-n}"

### GLOBALS ###
declare module=
declare tag=
declare pkg=
declare repos=
declare sdk=
declare changed_repos=
# readonly aml_buildroot # - set in main

### INCLUDES ###
source "${script_path}/vars/aml"
source "${script_path}/vars/aml_tags"

### HELP MESSAGE (USAGE INFO)
help_message() {
  echo "${help_message:-'No help available.'}"
}

### FUNCTIONS ###

# error message
# ARG1: error message for STDERR
# ARG2: error status
error_m() {
  echo "ERROR: ${1:-'failed.'}" 1>&2
  return "${2:-1}"
}

override_repo_in_calyxos_manifest() {
  # IMPORTANT: This function assumes that all project names start with "platform/".
  local repo="$1"
  local manifest="$2"
  local aosp_project_name="platform/$repo"
  # CalyxOS project names have slashes replaced with underscores
  local calyxos_project_name="CalyxOS/platform_${repo//\//_}"
  cat <<EOF >>"$manifest" || return $?

  <remove-project name="$aosp_project_name" />
  <project name="$calyxos_project_name" path="$repo" remote="calyx" />
EOF
}

generate_aosp_manifest() {
  # Generate the AOSP manifest, to be used as a baseline for building the module.
  local manifest="${apex_manifest_outdir}/aosp_${module}.xml"
  echo "Generating AOSP manifest for: $module"
  repo --no-pager manifest -r --suppress-upstream-revision --suppress-dest-branch -o "$manifest" \
    || return $?
}

generate_calyxos_manifest() {
  echo "Generating CalyxOS manifest for: $module"
  local manifest="${apex_manifest_outdir}/calyxos_${module}.xml"
  local calyxos_revision="$(printf "$calyxos_revision_format" "$tag")"

  # Header.
  cat <<EOF >"$manifest" || return $?
<?xml version="1.0" encoding="UTF-8"?>
<!-- Automatically generated by $script_name -->
<manifest>
  <remote name="calyx"
          fetch="$CALYX_REMOTE_URL"
          review="review.calyxos.org"
          revision="$calyxos_revision" />
EOF

  # Changed repos.
  local repo
  for repo in $changed_repos; do
    if [ "$repo" == "." ]; then
      # "." is a special path that represents the module's defined repo path(s).
      local module_repo
      for module_repo in $repos; do
        override_repo_in_calyxos_manifest "$module_repo" "$manifest"
      done
    else
      override_repo_in_calyxos_manifest "$repo" "$manifest"
    fi
  done

  # Footer.
  cat <<'EOF' >>"$manifest" || return $?
</manifest>
EOF
}

repo_init_and_sync() {
  # Init, using AOSP_MANIFEST and local AOSP_MIRROR as a reference if provided.
  repo_init_args=(-u "$AOSP_MANIFEST" -b "$tag")
  if [ -n "$AOSP_MIRROR" ]; then
    repo_init_args+=(--reference="$AOSP_MIRROR")
  fi

  echo "Running: repo init ${repo_init_args[*]}"
  if ! repo init "${repo_init_args[@]}"; then
    ## Work around broken upstream manifests with duplicates that cause a failed repo init.
    git -C "$aml_buildroot_manifests" checkout default || return $?
    git -C "$aml_buildroot_manifests" reset --hard "$tag" || return $?
    sed -i -z -r -e 's:( *<project [^\n]+)\n\1:\1:' "${maifests_dir}/default.xml" || return $?
  fi

  # Sync so we know the manifest is functional.
  repo sync -dj6 --force-sync || return $?
}

generate_manifests() {
  if [ "$GENERATE_CALYXOS_MANIFESTS_ONLY" == "n" ]; then
    echo "Generating manifest(s) for: $module"
    repo_init_and_sync || return $?
    generate_aosp_manifest || return $?
  fi
  if [ -n "$changed_repos" ]; then
    generate_calyxos_manifest || return $?
  fi
}

main() {
  readonly aml_buildroot="$1"
  shift 1
  local modules="$*"
  readonly aml_buildroot_manifests="${aml_buildroot}/.repo/manifests"

  if [ ! -d "$aml_buildroot_manifests" ]; then
    error_m "Could not find $aml_buildroot_manifests" || return $?
  fi

  cd "${aml_buildroot}" || return $?

  # Support special "all" designation to handle all modules.
  if [ "$modules" == "all" ]; then
    modules="$(printf "%s\n" "${!modules_to_tags[@]}" | sort)" || return $?
  fi

  # module is a global variable, so other functions will see it.
  for module in $modules; do
    tag="${modules_to_tags[$module]:-}"
    pkg="${modules_to_apps[$module]:-}"
    repos="${modules_to_repos[$module]}"
    sdk="${modules_to_sdks[$module]:-}"
    changed_repos="${modules_with_repo_changes[$module]:-}"

    generate_manifests || return $?
  done
}

### RUN PROGRAM ###

main "${@}"


##
