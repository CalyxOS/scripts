#!/bin/bash

# SPDX-FileCopyrightText: 2024 The Calyx Institute
#
# SPDX-License-Identifier: Apache-2.0

#
# generate_mainline_manifest.sh:
#
#   Generate mainline manifest files, given an AOSP mainline build root
#   and a module name. Uses variables from vars/aml and vars/aml_tags.
#
#
##############################################################################


### SET ###

# use bash strict mode
set -euo pipefail

### TRAPS ###

# trap signals for clean exit
trap 'exit $?' EXIT
trap 'error_m interrupted!' SIGINT

### CONSTANTS ###
readonly script_name="$(basename "$0")"
readonly script_path="$(cd "$(dirname "$0")/..";pwd -P)"
readonly top="$(cd "$script_path/../..";pwd -P)"
readonly xml_auto_gen_line='<!-- Automatically generated by '"$script_name"' -->'
readonly default_aml_manifest_dir="$top/external/calyx/apex_manifest"
readonly default_aosp_remote="https://android.googlesource.com/"
readonly default_aosp_manifest="https://android.googlesource.com/platform/manifest.git"
readonly default_aosp_project_format="platform/%s"
readonly default_calyxos_remote="https://gitlab.com"
readonly default_calyxos_project_format="CalyxOS/platform_%s"
readonly default_calyxos_revision_format="refs/tags/%s_%s-calyx"
readonly help_message="$0 <aml_buildroot> <module_name>"

### ENVIRONMENT VARIABLES ###
## 1. FLAGS ##
## Valid values are y or n
# CALYXOS_MANIFESTS_ONLY: Whether or not to generate CalyxOS manifests only.
CALYXOS_MANIFESTS_ONLY="${CALYXOS_MANIFESTS_ONLY:-n}"

## 2. INPUT ##
# AOSP_MANIFEST: URL to the AOSP manifest.
AOSP_MANIFEST="${AOSP_MANIFEST:-$default_aosp_manifest}"
# AOSP_MIRROR: Local AOSP mirror reference, if any.
# AOSP_MIRROR: Local AOSP mirror reference, if any.
AOSP_MIRROR="${AOSP_MIRROR:-}"

## 3. OUTPUT ##
# AML_MANIFEST_DIR: Directory to place generated manifest files, to be later used (by other scripts)
# for initializing and syncing modules.
AML_MANIFEST_DIR="${AML_MANIFEST_DIR:-$default_aml_manifest_dir}"

## 4. OTHER OPTIONS ##
# AOSP_PROJECT_FORMAT: Format string for generating an AOSP project URI from a local project path.
AOSP_PROJECT_FORMAT="${AOSP_PROJECT_FORMAT:-$default_aosp_project_format}"
# AOSP_REMOTE: The base URI at which to find AOSP projects.
AOSP_REMOTE="${AOSP_REMOTE_URL:-$default_aosp_remote}"
# CALYXOS_PROJECT_FORMAT: Format string for generating a CalyxOS project URI from a local project path.
# (Slashes are replaced with underscores.)
CALYXOS_PROJECT_FORMAT="${CALYXOS_PROJECT_FORMAT:-$default_calyxos_project_format}"
# CALYXOS_REMOTE_URL: The base URI at which to find CalyxOS projects.
CALYXOS_REMOTE="${CALYXOS_REMOTE_URL:-$default_calyxos_remote}"
# CALYXOS_REVISION_FORMAT: Format string representing the revision to reference in generated CalyxOS
# manifests. First argument is the part of the tag prior to the version code; second is the version.
# e.g. For Connectivity, "refs/heads/%s_%.2s" may result in "refs/heads/aml_tet_34".
CALYXOS_REVISION_FORMAT="${CALYXOS_REVISION_FORMAT:-$default_calyxos_revision_format}"

### GLOBALS ###
declare module=
declare tag=
declare pkg=
declare repos=
declare sdk=
declare changed_repos=
# readonly aml_buildroot # - set in main

### INCLUDES ###
source "$script_path/vars/aml"
source "$script_path/vars/aml_tags"

### HELP MESSAGE (USAGE INFO)
help_message() {
  echo "${help_message:-'No help available.'}"
}

### FUNCTIONS ###

# error message
# ARG1: error message for STDERR
# ARG2: error status
error_m() {
  echo "ERROR: ${1:-'failed.'}" 1>&2
  return "${2:-1}"
}

module_print() {
  printf "%s\n" "[$module] $*"
}

override_repo_in_calyxos_manifest() {
  # IMPORTANT: This function assumes that all project names start with "platform/".
  local repo="$1"
  local manifest="$2"
  local aosp_project_name="$(printf "$AOSP_PROJECT_FORMAT" "$repo")"
  # CalyxOS project names have slashes replaced with underscores
  local calyxos_project_name="$(printf "$CALYXOS_PROJECT_FORMAT" "${repo//\//_}")"
  cat <<EOF >>"$manifest" || return $?

  <remove-project name="$aosp_project_name" />
  <project name="$calyxos_project_name" path="$repo" remote="calyx" />
EOF
}

generate_aosp_manifest() {
  # Generate the AOSP manifest, to be used as a baseline for building the module.
  module_print "Generating AOSP manifest"
  local manifest="$AML_MANIFEST_DIR/aosp_$module.xml"
  # sed expression to replace fetch=".." with the actual AOSP remote URL.
  local aosp_remote_expr='s!(<remote name="aosp" fetch=")\.\."!\1'"$AOSP_REMOTE"'"!'
  local auto_gen_expr='s/^(<manifest>)$/'"$xml_auto_gen_line"'\n\1/'
  repo --no-pager manifest -r --suppress-upstream-revision --suppress-dest-branch |
    sed -r -e "$aosp_remote_expr" -e "$auto_gen_expr" > "$manifest" || return $?
}

generate_calyxos_manifest() {
  module_print "Generating CalyxOS manifest"
  local manifest="$AML_MANIFEST_DIR/calyxos_$module.xml"
  local tag_prefix="${tag%_*}"
  local tag_version="${tag##*_}"
  local calyxos_revision="$(printf "$CALYXOS_REVISION_FORMAT" "$tag_prefix" "$tag_version")"

  # Header.
  cat <<EOF >"$manifest" || return $?
<?xml version="1.0" encoding="UTF-8"?>
$xml_auto_gen_line
<manifest>
  <remote name="calyx"
          fetch="$CALYXOS_REMOTE"
          review="review.calyxos.org"
          revision="$calyxos_revision" />

  <include name="aosp_$module.xml" />
EOF

  # Changed repos.
  local repo
  for repo in $changed_repos; do
    if [ "$repo" == "." ]; then
      # "." is a special path that represents the module's defined repo path(s).
      local module_repo
      for module_repo in $repos; do
        override_repo_in_calyxos_manifest "$module_repo" "$manifest"
      done
    else
      override_repo_in_calyxos_manifest "$repo" "$manifest"
    fi
  done

  # Footer.
  cat <<'EOF' >>"$manifest" || return $?
</manifest>
EOF
}

repo_init_and_sync() {
  # Init, using AOSP_MANIFEST and local AOSP_MIRROR as a reference if provided.
  repo_init_args=(-u "$AOSP_MANIFEST" -b "$tag")
  if [ -n "$AOSP_MIRROR" ]; then
    repo_init_args+=(--reference="$AOSP_MIRROR")
  fi

  module_print "Running: repo init ${repo_init_args[*]}"
  if ! repo init "${repo_init_args[@]}"; then
    ## Work around broken upstream manifests with duplicates that cause a failed repo init.
    git -C "$aml_buildroot_manifests" checkout default || return $?
    git -C "$aml_buildroot_manifests" reset --hard "$tag" || return $?
    sed -i -z -r -e 's:( *<project [^\n]+)\n\1:\1:' "$aml_buildroot_manifests/default.xml" || return $?
  fi

  # Sync so we know the manifest is functional. Try local-only first, then fetch too if needed.
  if ! repo sync -dlj16 --force-sync; then
    repo sync -dj16 --force-sync || return $?
  fi
}

generate_manifests() {
  if [ "$CALYXOS_MANIFESTS_ONLY" == "n" ]; then
    module_print "Generating manifest(s)"
    repo_init_and_sync || return $?
    generate_aosp_manifest || return $?
  fi
  if [ -n "$changed_repos" ]; then
    generate_calyxos_manifest || return $?
  fi
}

main() {
  readonly aml_buildroot="$1"
  shift 1
  local modules="$*"
  readonly aml_buildroot_manifests="$aml_buildroot/.repo/manifests"

  if [ ! -d "$aml_buildroot_manifests" ]; then
    error_m "Could not find $aml_buildroot_manifests" || return $?
  fi

  cd "$aml_buildroot" || return $?

  # Support special "all" designation to handle all modules.
  if [ "$modules" == "all" ]; then
    modules="$(printf "%s\n" "${!modules_to_tags[@]}" | sort)" || return $?
  fi

  # module is a global variable, so other functions will see it.
  for module in $modules; do
    tag="${modules_to_tags[$module]:-}"
    pkg="${modules_to_apps[$module]:-}"
    repos="${modules_to_repos[$module]}"
    sdk="${modules_to_sdks[$module]:-}"
    changed_repos="${modules_with_repo_changes[$module]:-}"

    generate_manifests
  done
}

### RUN PROGRAM ###

main "$@"


##
